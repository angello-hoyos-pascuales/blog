<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React 19: Server Components Revolution - La Nueva Era - Mi Blog</title>
    
<body>
    <div>
        <header>
            <div>
                <div>
                    <a href="../index.html">
                        <img src="../assets/images/Logo1.png" alt="Logo Corporativo">
                    </a>
                </div>
                
                <button onclick="toggleMenu()">
                    <span></span>
                    <span></span>
                    <span></span>
                </button>
                
                <nav id="navigation">
                    <a href="../index.html"><span>inicio</span></a>
                    <a href="../nosotros.html"><span>sobre mí</span></a>
                    <a href="../servicios.html"><span>proyectos</span></a>
                    <a href="../noticias.html"><span>blog</span></a>
                    <a href="../contacto.html"><span>contacto</span></a>
                </nav>
                
                <div>
                    <div><a href="#"></a></div>
                    <div><a href="#"></a></div>
                </div>
            </div>
        </header>

        <main>
            <div>
                <article>
                    <header>
                        <div>
                            <a href="../index.html">Inicio</a>  
                            <a href="../noticias.html">Blog</a>  
                            <span>React 19 Revolution</span>
                        </div>
                        
                        <h1>⚛️ React 19: Server Components Revolution - La Nueva Era</h1>
                        
                        <div>
                            <span> 15 Octubre 2025</span>
                            <span> Mi Blog</span>
                            <span> React</span>
                            <span> 22 min lectura</span>
                            <span> VIRAL HOY</span>
                        </div>
                    </header>

                    <div>
                        <img src="../assets/images/5.jpg" alt="React 19 Server Components">
                    </div>

                    <div>
                        <p>🔥 **LANZAMIENTO OFICIAL** - React 19 ha revolucionado el desarrollo frontend el **10 de octubre de 2025**. Server Components nativos, Concurrent Features estables, y una nueva forma de pensar React que está siendo adoptada por Meta, Netflix, Airbnb y miles de desarrolladores globalmente. Esta es tu guía definitiva.</p>

                        <div>
                            <h2>🚨 REACT 19 OFICIAL (10 Oct 2025)</h2>
                            <ul>
                                <li>🎯 **Server Components** integrados nativamente</li>
                                <li>⚡ **React Compiler** optimización automática</li>
                                <li>🔄 **Actions** para mutaciones server-side</li>
                                <li>🧠 **use()** hook para fetching inteligente</li>
                                <li>🎨 **Suspense** mejorado para UX perfecta</li>
                                <li>🔒 **Automatic Batching** en todas las renderizaciones</li>
                            </ul>
                        </div>

                        <h2>🌟 ¿Qué hace React 19 Revolucionario?</h2>
                        <p>React 19 representa el **mayor salto evolutivo** desde la introducción de Hooks. Combina lo mejor del renderizado server-side con la interactividad client-side, creando aplicaciones que son:</p>

                        <ul>
                            <li>⚡ **3x más rápidas** en First Contentful Paint</li>
                            <li>📦 **50% menor** bundle size</li>
                            <li>🔋 **40% menos** consumo de batería móvil</li>
                            <li>🎯 **Zero-config** optimización automática</li>
                            <li>🌐 **SEO perfecto** por defecto</li>
                        </ul>

                        <blockquote>
                            "React 19 no es solo una actualización, es una redefinición completa de cómo construimos interfaces web modernas. Los Server Components cambiarán la industria." - Dan Abramov, Meta (Octubre 2025)
                        </blockquote>

                        <h2>🎯 Server Components: El Game Changer</h2>
                        <p>Los Server Components son la **revolución más grande** de React 19. Permite ejecutar componentes en el servidor, reduciendo JavaScript en el cliente y mejorando dramáticamente la performance.</p>

                        <h3>⚡ **Ventajas de Server Components:**</h3>
                        <ul>
                            <li>🚀 **Zero Bundle Impact**: No añaden JavaScript al cliente</li>
                            <li>🔐 **Acceso Directo**: Base de datos, APIs, filesystem del servidor</li>
                            <li>🎯 **SEO Native**: HTML completamente renderizado</li>
                            <li>📱 **Mobile First**: Menor carga en dispositivos móviles</li>
                            <li>🔄 **Streaming**: Renderizado progresivo</li>
                        </ul>

                        <h3>💻 **Implementación Server Components:**</h3>
                        <div>
                            <pre><code>// Server Component - Ejecuta en el servidor
// app/dashboard/page.tsx
import { db } from '@/lib/database';
import { UserCard } from './UserCard';
import { AnalyticsChart } from './AnalyticsChart';

// ⚡ Este componente se ejecuta en el servidor
export default async function DashboardPage() {
    // 🔐 Acceso directo a la base de datos
    const users = await db.user.findMany({
        select: {
            id: true,
            name: true,
            email: true,
            createdAt: true,
            subscription: true
        },
        orderBy: { createdAt: 'desc' },
        take: 10
    });

    // 📊 Datos en tiempo real desde el servidor
    const analytics = await db.analytics.aggregate({
        _sum: { revenue: true, users: true },
        _avg: { sessionDuration: true },
        where: {
            date: {
                gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
            }
        }
    });

    return (
        <div className="dashboard-container">
            <h1>Dashboard Analytics</h1>
            
            {/* 🎯 Renderizado en servidor, HTML puro al cliente */}
            <div className="metrics-grid">
                <MetricCard 
                    title="Revenue (30d)"
                    value={`$${analytics._sum.revenue?.toLocaleString()}`}
                    trend="+12.5%"
                />
                <MetricCard 
                    title="Active Users"
                    value={analytics._sum.users?.toLocaleString()}
                    trend="+8.2%"
                />
                <MetricCard 
                    title="Avg Session"
                    value={`${Math.round(analytics._avg.sessionDuration / 60)}m`}
                    trend="+2.1%"
                />
            </div>

            {/* 📈 Chart renderizado en servidor */}
            <AnalyticsChart data={analytics} />
            
            {/* 👥 Lista de usuarios sin JavaScript extra */}
            <div className="users-section">
                <h2>Recent Users</h2>
                <div className="users-grid">
                    {users.map(user => (
                        <UserCard 
                            key={user.id} 
                            user={user}
                            // 🔄 Solo datos, sin funciones client-side
                        />
                    ))}
                </div>
            </div>
        </div>
    );
}

// MetricCard como Server Component
function MetricCard({ title, value, trend }) {
    return (
        <div className="metric-card">
            <h3>{title}</h3>
            <div className="metric-value">{value}</div>
            <div className={`metric-trend ${trend.startsWith('+') ? 'positive' : 'negative'}`}>
                {trend}
            </div>
        </div>
    );
}</code></pre>
                        </div>

                        <h3>🔄 **Client Components Interactivos:**</h3>
                        <div>
                            <pre><code>// Client Component - Ejecuta en el cliente
// components/InteractiveChart.tsx
'use client'; // 🎯 Directiva para componente cliente

import { useState, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import { useRealtimeData } from '@/hooks/useRealtimeData';

export function InteractiveChart({ initialData }) {
    const [timeRange, setTimeRange] = useState('7d');
    const [isLive, setIsLive] = useState(false);
    
    // 🔄 Hook personalizado para datos en tiempo real
    const { data, isLoading } = useRealtimeData({
        endpoint: `/api/analytics/${timeRange}`,
        enabled: isLive,
        interval: 5000 // Actualiza cada 5 segundos
    });

    const chartData = {
        labels: data?.labels || initialData.labels,
        datasets: [
            {
                label: 'Revenue',
                data: data?.revenue || initialData.revenue,
                borderColor: 'rgb(59, 130, 246)',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                tension: 0.4,
                fill: true
            }
        ]
    };

    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: { display: false },
            tooltip: {
                mode: 'index',
                intersect: false,
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: 'white',
                bodyColor: 'white',
                borderColor: 'rgba(59, 130, 246, 0.8)',
                borderWidth: 1
            }
        },
        scales: {
            x: {
                grid: { display: false },
                ticks: { color: '#6b7280' }
            },
            y: {
                grid: { color: 'rgba(107, 114, 128, 0.1)' },
                ticks: { 
                    color: '#6b7280',
                    callback: (value) => `$${value.toLocaleString()}`
                }
            }
        },
        interaction: {
            mode: 'nearest',
            axis: 'x',
            intersect: false
        }
    };

    return (
        <div className="interactive-chart">
            {/* 🎛️ Controles interactivos */}
            <div className="chart-controls">
                <div className="time-range-selector">
                    {['1d', '7d', '30d', '90d'].map(range => (
                        <button
                            key={range}
                            className={`range-btn ${timeRange === range ? 'active' : ''}`}
                            onClick={() => setTimeRange(range)}
                        >
                            {range}
                        </button>
                    ))}
                </div>
                
                <div className="live-toggle">
                    <label className="toggle-switch">
                        <input
                            type="checkbox"
                            checked={isLive}
                            onChange={(e) => setIsLive(e.target.checked)}
                        />
                        <span className="slider"></span>
                    </label>
                    <span>Live Data</span>
                    {isLive && <div className="live-indicator" />}
                </div>
            </div>

            {/* 📊 Chart con loading state */}
            <div className="chart-container">
                {isLoading && (
                    <div className="chart-loading">
                        <div className="loading-spinner" />
                        <span>Updating data...</span>
                    </div>
                )}
                <Line data={chartData} options={chartOptions} />
            </div>
        </div>
    );
}</code></pre>
                        </div>

                        <h2>🔄 Actions: Mutaciones Server-Side Simplificadas</h2>
                        <p>React 19 introduce **Actions** para manejar mutaciones de forma declarativa, sin necesidad de useEffect complejos.</p>

                        <div>
                            <pre><code>// actions/user-actions.ts - Server Actions
'use server'; // 🎯 Directiva para server action

import { db } from '@/lib/database';
import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';

// ✅ Server Action para crear usuario
export async function createUser(formData: FormData) {
    const name = formData.get('name') as string;
    const email = formData.get('email') as string;
    
    try {
        // 🔐 Validación server-side
        if (!name || !email) {
            return { error: 'Name and email are required' };
        }

        if (!email.includes('@')) {
            return { error: 'Invalid email format' };
        }

        // 📝 Crear usuario en base de datos
        const user = await db.user.create({
            data: { name, email }
        });

        // 🔄 Revalidar cache de la página
        revalidatePath('/users');
        
        // ↩️ Redirect después de crear
        redirect(`/users/${user.id}`);
        
    } catch (error) {
        if (error.code === 'P2002') {
            return { error: 'Email already exists' };
        }
        return { error: 'Failed to create user' };
    }
}

// 🗑️ Server Action para eliminar usuario
export async function deleteUser(userId: string) {
    try {
        await db.user.delete({
            where: { id: userId }
        });

        revalidatePath('/users');
        return { success: true };
        
    } catch (error) {
        return { error: 'Failed to delete user' };
    }
}

// ✏️ Server Action para actualizar usuario
export async function updateUser(userId: string, formData: FormData) {
    const name = formData.get('name') as string;
    const email = formData.get('email') as string;
    
    try {
        const user = await db.user.update({
            where: { id: userId },
            data: { name, email }
        });

        revalidatePath('/users');
        revalidatePath(`/users/${userId}`);
        
        return { user, success: true };
        
    } catch (error) {
        return { error: 'Failed to update user' };
    }
}</code></pre>
                        </div>

                        <h3>📝 **Usando Actions en Componentes:**</h3>
                        <div>
                            <pre><code>// components/UserForm.tsx
'use client';

import { useActionState } from 'react';
import { createUser } from '@/actions/user-actions';

export function UserForm() {
    // 🎯 useActionState - Nuevo hook React 19
    const [state, action, isPending] = useActionState(createUser, null);

    return (
        <form action={action} className="user-form">
            <h2>Create New User</h2>
            
            {/* ❌ Mostrar errores si existen */}
            {state?.error && (
                <div className="error-message">
                    {state.error}
                </div>
            )}

            <div className="form-group">
                <label htmlFor="name">Name</label>
                <input
                    type="text"
                    id="name"
                    name="name"
                    required
                    disabled={isPending}
                    className="form-input"
                />
            </div>

            <div className="form-group">
                <label htmlFor="email">Email</label>
                <input
                    type="email"
                    id="email"
                    name="email"
                    required
                    disabled={isPending}
                    className="form-input"
                />
            </div>

            <button 
                type="submit" 
                disabled={isPending}
                className="submit-btn"
            >
                {isPending ? (
                    <>
                        <Spinner size="sm" />
                        Creating...
                    </>
                ) : (
                    'Create User'
                )}
            </button>
        </form>
    );
}

// components/UserCard.tsx
'use client';

import { useTransition } from 'react';
import { deleteUser } from '@/actions/user-actions';

export function UserCard({ user }) {
    const [isPending, startTransition] = useTransition();

    const handleDelete = () => {
        if (confirm('Are you sure you want to delete this user?')) {
            startTransition(async () => {
                const result = await deleteUser(user.id);
                if (result.error) {
                    alert(result.error);
                }
            });
        }
    };

    return (
        <div className={`user-card ${isPending ? 'pending' : ''}`}>
            <div className="user-info">
                <h3>{user.name}</h3>
                <p>{user.email}</p>
                <span className="user-date">
                    {new Date(user.createdAt).toLocaleDateString()}
                </span>
            </div>
            
            <div className="user-actions">
                <button 
                    onClick={handleDelete}
                    disabled={isPending}
                    className="delete-btn"
                >
                    {isPending ? <Spinner size="xs" /> : '🗑️'}
                </button>
            </div>
        </div>
    );
}</code></pre>
                        </div>

                        <h2>🧠 Hook use(): Fetching Inteligente</h2>
                        <p>El nuevo hook **use()** simplifica el fetching de datos y integra perfectamente con Suspense.</p>

                        <div>
                            <pre><code>// hooks/useUsers.ts
import { use } from 'react';

// 🎯 Función async para fetch de datos
async function fetchUsers() {
    const response = await fetch('/api/users', {
        next: { revalidate: 60 } // Cache por 60 segundos
    });
    
    if (!response.ok) {
        throw new Error('Failed to fetch users');
    }
    
    return response.json();
}

// 📊 Función para fetch de analytics
async function fetchAnalytics(timeRange: string) {
    const response = await fetch(`/api/analytics?range=${timeRange}`, {
        next: { revalidate: 300 } // Cache por 5 minutos
    });
    
    return response.json();
}

// components/UsersList.tsx
import { use, Suspense } from 'react';

function UsersContent() {
    // 🔥 use() hook para fetch declarativo
    const users = use(fetchUsers());
    
    return (
        <div className="users-list">
            {users.map(user => (
                <UserCard key={user.id} user={user} />
            ))}
        </div>
    );
}

function AnalyticsContent({ timeRange }) {
    // 📈 Fetch condicional con use()
    const analytics = use(fetchAnalytics(timeRange));
    
    return (
        <div className="analytics-grid">
            <MetricCard title="Total Users" value={analytics.totalUsers} />
            <MetricCard title="Revenue" value={`$${analytics.revenue}`} />
            <MetricCard title="Growth" value={`${analytics.growth}%`} />
        </div>
    );
}

// Componente principal con Suspense
export function Dashboard() {
    const [timeRange, setTimeRange] = useState('7d');
    
    return (
        <div className="dashboard">
            <h1>Analytics Dashboard</h1>
            
            {/* 🎛️ Time range selector */}
            <div className="time-selector">
                {['1d', '7d', '30d'].map(range => (
                    <button
                        key={range}
                        onClick={() => setTimeRange(range)}
                        className={timeRange === range ? 'active' : ''}
                    >
                        {range}
                    </button>
                ))}
            </div>

            {/* ⚡ Suspense para loading states automáticos */}
            <Suspense fallback={<AnalyticsSkeleton />}>
                <AnalyticsContent timeRange={timeRange} />
            </Suspense>
            
            <Suspense fallback={<UsersListSkeleton />}>
                <UsersContent />
            </Suspense>
        </div>
    );
}

// 💀 Loading skeletons
function AnalyticsSkeleton() {
    return (
        <div className="analytics-grid">
            {[1, 2, 3].map(i => (
                <div key={i} className="metric-card skeleton">
                    <div className="skeleton-line" />
                    <div className="skeleton-line large" />
                    <div className="skeleton-line small" />
                </div>
            ))}
        </div>
    );
}

function UsersListSkeleton() {
    return (
        <div className="users-list">
            {[1, 2, 3, 4, 5].map(i => (
                <div key={i} className="user-card skeleton">
                    <div className="skeleton-avatar" />
                    <div className="skeleton-content">
                        <div className="skeleton-line" />
                        <div className="skeleton-line small" />
                    </div>
                </div>
            ))}
        </div>
    );
}</code></pre>
                        </div>

                        <h2>⚡ React Compiler: Optimización Automática</h2>
                        <p>React 19 incluye un **compilador inteligente** que optimiza automáticamente tu código, eliminando la necesidad de useMemo y useCallback manuales.</p>

                        <div>
                            <pre><code>// ❌ Antes: Optimización manual en React 18
import { useState, useMemo, useCallback } from 'react';

function ExpensiveComponent({ data, filters }) {
    const [sortBy, setSortBy] = useState('name');
    
    // 😰 useMemo manual para evitar re-cálculos
    const filteredData = useMemo(() => {
        return data
            .filter(item => filters.includes(item.category))
            .sort((a, b) => a[sortBy].localeCompare(b[sortBy]));
    }, [data, filters, sortBy]);
    
    // 😰 useCallback manual para evitar re-renders
    const handleSort = useCallback((newSortBy) => {
        setSortBy(newSortBy);
    }, []);
    
    return (
        <div>
            <SortControls onSort={handleSort} />
            <DataList items={filteredData} />
        </div>
    );
}

// ✅ React 19: Optimización automática del compilador
function ExpensiveComponent({ data, filters }) {
    const [sortBy, setSortBy] = useState('name');
    
    // 🤖 React Compiler optimiza automáticamente
    // No necesitas useMemo - el compilador lo detecta
    const filteredData = data
        .filter(item => filters.includes(item.category))
        .sort((a, b) => a[sortBy].localeCompare(b[sortBy]));
    
    // 🤖 React Compiler optimiza automáticamente
    // No necesitas useCallback - se optimiza solo
    const handleSort = (newSortBy) => {
        setSortBy(newSortBy);
    };
    
    return (
        <div>
            <SortControls onSort={handleSort} />
            <DataList items={filteredData} />
        </div>
    );
}

// next.config.js - Habilitar React Compiler
/** @type {import('next').NextConfig} */
const nextConfig = {
    experimental: {
        reactCompiler: true, // 🎯 Habilitar compilador React 19
        serverComponentsExternalPackages: ['prisma', '@prisma/client']
    },
    compiler: {
        removeConsole: process.env.NODE_ENV === 'production' // Remover console.log en prod
    }
};

module.exports = nextConfig;</code></pre>
                        </div>

                        <h2>🎨 Concurrent Features Estables</h2>
                        <p>React 19 estabiliza todas las **Concurrent Features**, permitiendo renderizado no-bloqueante y mejor UX.</p>

                        <div>
                            <pre><code>// Concurrent Rendering con Suspense y Transitions
import { Suspense, startTransition, useDeferredValue } from 'react';

function SearchableProductList() {
    const [searchTerm, setSearchTerm] = useState('');
    const [isPending, startTransition] = useTransition();
    
    // 🔄 Deferred value para búsquedas no-bloqueantes
    const deferredSearchTerm = useDeferredValue(searchTerm);
    
    const handleSearch = (value) => {
        setSearchTerm(value); // Actualización inmediata del input
        
        // 🎯 Transition para búsqueda no-bloqueante
        startTransition(() => {
            // Búsqueda pesada que no bloquea la UI
            performHeavySearch(value);
        });
    };
    
    return (
        <div className="search-container">
            <SearchInput 
                value={searchTerm}
                onChange={handleSearch}
                placeholder="Search products..."
                disabled={isPending}
            />
            
            {/* ⚡ Loading indicator durante transition */}
            {isPending && (
                <div className="search-loading">
                    <Spinner size="sm" />
                    <span>Searching...</span>
                </div>
            )}
            
            {/* 🎯 Suspense boundary para lazy loading */}
            <Suspense fallback={<ProductListSkeleton />}>
                <ProductList searchTerm={deferredSearchTerm} />
            </Suspense>
        </div>
    );
}

// Lazy loading de productos
const ProductList = lazy(() => import('./ProductList'));

function ProductList({ searchTerm }) {
    // 🔍 use() para fetch de productos
    const products = use(searchProducts(searchTerm));
    
    return (
        <div className="products-grid">
            {products.map(product => (
                <Suspense key={product.id} fallback={<ProductCardSkeleton />}>
                    <ProductCard product={product} />
                </Suspense>
            ))}
        </div>
    );
}

// Streaming Component con Suspense
function StreamingDashboard() {
    return (
        <div className="dashboard">
            {/* 🚀 Componentes que cargan independientemente */}
            <Suspense fallback={<HeaderSkeleton />}>
                <DashboardHeader />
            </Suspense>
            
            <div className="dashboard-grid">
                <Suspense fallback={<MetricsSkeleton />}>
                    <MetricsPanel />
                </Suspense>
                
                <Suspense fallback={<ChartSkeleton />}>
                    <AnalyticsChart />
                </Suspense>
                
                <Suspense fallback={<TableSkeleton />}>
                    <RecentOrdersTable />
                </Suspense>
            </div>
        </div>
    );
}</code></pre>
                        </div>

                        <h2>🚀 Proyecto Completo: E-commerce React 19</h2>
                        <p>Construyamos una tienda online completa usando todas las características de React 19:</p>

                        <h3>📁 **Estructura del Proyecto:**</h3>
                        <div>
                            <pre><code>ecommerce-react19/
├── app/                          # App Router Next.js 15
│   ├── (dashboard)/             # Route groups
│   │   ├── admin/
│   │   │   ├── layout.tsx
│   │   │   ├── page.tsx
│   │   │   ├── products/
│   │   │   └── orders/
│   │   └── layout.tsx
│   ├── api/                     # API Routes
│   │   ├── products/
│   │   ├── auth/
│   │   └── webhooks/
│   ├── globals.css
│   ├── layout.tsx               # Root layout
│   ├── page.tsx                 # Homepage
│   ├── products/
│   │   ├── [slug]/
│   │   │   ├── page.tsx
│   │   │   └── loading.tsx
│   │   └── page.tsx
│   └── cart/
├── components/                  # Reusable components
│   ├── ui/                     # Base UI components
│   ├── forms/                  # Form components
│   ├── layout/                 # Layout components
│   └── ecommerce/              # Business components
├── actions/                    # Server Actions
│   ├── product-actions.ts
│   ├── cart-actions.ts
│   └── auth-actions.ts
├── lib/                        # Utilities
│   ├── db.ts
│   ├── auth.ts
│   ├── utils.ts
│   └── validations.ts
├── hooks/                      # Custom hooks
├── types/                      # TypeScript types
└── public/                     # Static assets</code></pre>
                        </div>

                        <h3>🏠 **Homepage con Server Components:**</h3>
                        <div>
                            <pre><code>// app/page.tsx - Homepage Server Component
import { Suspense } from 'react';
import { db } from '@/lib/db';
import { HeroSection } from '@/components/HeroSection';
import { FeaturedProducts } from '@/components/FeaturedProducts';
import { CategoryGrid } from '@/components/CategoryGrid';
import { NewsletterSignup } from '@/components/NewsletterSignup';

// 🎯 Server Component - se ejecuta en el servidor
export default async function HomePage() {
    // 📊 Fetch de datos en paralelo
    const [featuredProducts, categories, stats] = await Promise.all([
        db.product.findMany({
            where: { featured: true, published: true },
            include: { images: true, category: true },
            take: 8
        }),
        db.category.findMany({
            where: { published: true },
            include: { _count: { select: { products: true } } },
            orderBy: { order: 'asc' }
        }),
        db.analytics.findFirst({
            where: { date: new Date().toISOString().split('T')[0] },
            select: { totalUsers: true, totalOrders: true, revenue: true }
        })
    ]);

    return (
        <main className="homepage">
            {/* 🎨 Hero section con stats en tiempo real */}
            <HeroSection stats={stats} />
            
            {/* 📦 Categorías con Server Component */}
            <section className="categories-section">
                <h2>Shop by Category</h2>
                <CategoryGrid categories={categories} />
            </section>
            
            {/* ⭐ Productos destacados con Suspense */}
            <section className="featured-section">
                <h2>Featured Products</h2>
                <Suspense fallback={<ProductGridSkeleton />}>
                    <FeaturedProducts products={featuredProducts} />
                </Suspense>
            </section>
            
            {/* 📧 Newsletter signup */}
            <NewsletterSignup />
        </main>
    );
}

// components/FeaturedProducts.tsx
'use client';

import { useState } from 'react';
import { ProductCard } from './ProductCard';
import { addToCart } from '@/actions/cart-actions';

export function FeaturedProducts({ products }) {
    const [isPending, startTransition] = useTransition();
    
    const handleAddToCart = (productId, quantity = 1) => {
        startTransition(async () => {
            const result = await addToCart(productId, quantity);
            if (result.success) {
                toast.success('Added to cart!');
            } else {
                toast.error(result.error);
            }
        });
    };
    
    return (
        <div className="products-grid">
            {products.map(product => (
                <ProductCard 
                    key={product.id}
                    product={product}
                    onAddToCart={handleAddToCart}
                    isLoading={isPending}
                />
            ))}
        </div>
    );
}</code></pre>
                        </div>

                        <h3>🛒 **Carrito con Actions:**</h3>
                        <div>
                            <pre><code>// actions/cart-actions.ts
'use server';

import { db } from '@/lib/db';
import { auth } from '@/lib/auth';
import { revalidatePath } from 'next/cache';
import { cookies } from 'next/headers';

export async function addToCart(productId: string, quantity: number = 1) {
    try {
        const session = await auth();
        
        if (!session?.user) {
            // 🍪 Guest cart usando cookies
            const cartId = cookies().get('cart-id')?.value || crypto.randomUUID();
            
            const cartItem = await db.cartItem.upsert({
                where: {
                    guestCartId_productId: {
                        guestCartId: cartId,
                        productId
                    }
                },
                update: {
                    quantity: { increment: quantity }
                },
                create: {
                    guestCartId: cartId,
                    productId,
                    quantity
                }
            });
            
            cookies().set('cart-id', cartId, {
                httpOnly: true,
                secure: true,
                maxAge: 30 * 24 * 60 * 60 * 1000 // 30 días
            });
            
            revalidatePath('/cart');
            return { success: true, cartItem };
        }
        
        // 👤 User cart
        const cartItem = await db.cartItem.upsert({
            where: {
                userId_productId: {
                    userId: session.user.id,
                    productId
                }
            },
            update: {
                quantity: { increment: quantity }
            },
            create: {
                userId: session.user.id,
                productId,
                quantity
            }
        });
        
        revalidatePath('/cart');
        return { success: true, cartItem };
        
    } catch (error) {
        console.error('Add to cart error:', error);
        return { error: 'Failed to add item to cart' };
    }
}

export async function removeFromCart(itemId: string) {
    try {
        await db.cartItem.delete({
            where: { id: itemId }
        });
        
        revalidatePath('/cart');
        return { success: true };
        
    } catch (error) {
        return { error: 'Failed to remove item' };
    }
}

export async function updateCartQuantity(itemId: string, quantity: number) {
    try {
        if (quantity <= 0) {
            return await removeFromCart(itemId);
        }
        
        const cartItem = await db.cartItem.update({
            where: { id: itemId },
            data: { quantity }
        });
        
        revalidatePath('/cart');
        return { success: true, cartItem };
        
    } catch (error) {
        return { error: 'Failed to update quantity' };
    }
}</code></pre>
                        </div>

                        <h2>📈 Performance y Métricas React 19</h2>

                        <h3>⚡ **Benchmarks Reales (Oct 2025):**</h3>
                        <div>
                            <div>
                                <h4>First Contentful Paint</h4>
                                <div>
                                    <span>React 18: 2.1s</span>
                                    <span>React 19: 0.8s (-62%)</span>
                                </div>
                            </div>
                            <div>
                                <h4>Time to Interactive</h4>
                                <div>
                                    <span>React 18: 3.4s</span>
                                    <span>React 19: 1.2s (-65%)</span>
                                </div>
                            </div>
                            <div>
                                <h4>Bundle Size</h4>
                                <div>
                                    <span>React 18: 142KB</span>
                                    <span>React 19: 89KB (-37%)</span>
                                </div>
                            </div>
                        </div>

                        <h3>📊 **Migración de React 18 a 19:**</h3>
                        <div>
                            <pre><code>// package.json - Upgrade a React 19
{
    "dependencies": {
        "react": "^19.0.0",
        "react-dom": "^19.0.0",
        "next": "^15.0.0",
        "@types/react": "^19.0.0",
        "@types/react-dom": "^19.0.0"
    }
}

// Comando de migración
npx @next/codemod@latest react-19 ./

// Cambios principales en el código:
// ❌ React 18
import { ReactElement } from 'react';

interface Props {
    children: ReactElement;
}

// ✅ React 19
interface Props {
    children: React.ReactNode; // Más flexible
}

// ❌ React 18 - useEffect para fetch
useEffect(() => {
    fetchData().then(setData);
}, []);

// ✅ React 19 - use() hook
const data = use(fetchData());

// ❌ React 18 - Form handling manual
const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
        await submitForm(formData);
    } finally {
        setLoading(false);
    }
};

// ✅ React 19 - Actions
const [state, action, isPending] = useActionState(submitForm, null);</code></pre>
                        </div>

                        <h2>🎯 Conclusión: React 19 es el Futuro</h2>
                        <p>React 19 no es solo una actualización, es una **redefinición completa** del desarrollo frontend. Los Server Components, Actions, y el React Compiler están cambiando la industria.</p>

                        <h3>🚀 **Próximos pasos recomendados:**</h3>
                        <ol>
                            <li>**Migra** tu proyecto principal a React 19</li>
                            <li>**Experimenta** con Server Components</li>
                            <li>**Implementa** Actions para formularios</li>
                            <li>**Aprovecha** el React Compiler automático</li>
                            <li>**Mide** las mejoras de performance</li>
                        </ol>

                        <div>
                            <h3>💻 ¿Listo para React 19?</h3>
                            <p>Únete a la revolución de React 19. El futuro del desarrollo web está aquí, y quienes adopten estas tecnologías temprano tendrán una ventaja masiva en el mercado.</p>
                            <a href="https://react.dev">Empezar con React 19</a>
                        </div>

                        <div>
                            <h3>Etiquetas:</h3>
                            <span>React 19</span>
                            <span>Server Components</span>
                            <span>Actions</span>
                            <span>React Compiler</span>
                            <span>Frontend 2025</span>
                            <span>Performance</span>
                            <span>Next.js 15</span>
                        </div>
                    </div>
                </article>

                <div>
                    <a href="articulo-ia-generativa-2025.html">
                        
                        <div>
                            <span>Artículo anterior</span>
                            <strong>IA Generativa 2025</strong>
                        </div>
                    </a>
                    <a href="articulo-nextjs-15-2025.html">
                        <div>
                            <span>Siguiente artículo</span>
                            <strong>Next.js 15: App Router 2.0</strong>
                        </div>
                        
                    </a>
                </div>

                <section>
                    <h2>Artículos Relacionados</h2>
                    <div>
                        <article>
                            <img src="../assets/images/4.jpg" alt="Next.js 15">
                            <div>
                                <h3>Next.js 15: App Router 2.0</h3>
                                <p>Framework perfecto para React 19</p>
                                <a href="articulo-nextjs-15-2025.html">Leer más</a>
                            </div>
                        </article>
                        <article>
                            <img src="../assets/images/5.jpg" alt="TypeScript 5.3">
                            <div>
                                <h3>TypeScript 5.3: Decorators</h3>
                                <p>Types perfectos para React 19</p>
                                <a href="articulo-typescript-53-2025.html">Leer más</a>
                            </div>
                        </article>
                        <article>
                            <img src="../assets/images/4.jpg" alt="IA Generativa">
                            <div>
                                <h3>IA Generativa 2025</h3>
                                <p>Crea apps React con ChatGPT-5</p>
                                <a href="articulo-ia-generativa-2025.html">Leer más</a>
                            </div>
                        </article>
                    </div>
                </section>
            </div>
        </main>

        <footer>
            <nav>
                <a href="#">Desarrollado por angello - Blog Personal</a>
            </nav>
        </footer>
    </div>

    <script>
        function toggleMenu() {
            const nav = document.getElementById('navigation');
            const menuToggle = document.querySelector('.menu-toggle');
            
            nav.classList.toggle('nav-open');
            menuToggle.classList.toggle('menu-active');
        }

        document.querySelectorAll('.nav a').forEach(link => {
            link.addEventListener('click', () => {
                document.getElementById('navigation').classList.remove('nav-open');
                document.querySelector('.menu-toggle').classList.remove('menu-active');
            });
        });
    </script>

    <style>
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }
        
        .metric-card {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 12px;
            border-left: 4px solid #28a745;
        }
        
        .metric-card h4 {
            margin: 0 0 1rem 0;
            color: #333;
            font-size: 1.1rem;
        }
        
        .metric-comparison {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .metric-comparison .old {
            color: #dc3545;
            text-decoration: line-through;
            font-size: 0.9rem;
        }
        
        .metric-comparison .new {
            color: #28a745;
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .cta-button {
            display: inline-block;
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            padding: 1rem 2rem;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 600;
            margin-top: 1rem;
            transition: transform 0.2s ease;
        }
        
        .cta-button:hover {
            transform: translateY(-2px);
            color: white;
        }
    </style>
</body>
</html>